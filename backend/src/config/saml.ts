import { Strategy } from '@node-saml/passport-saml';
import { env } from './environment';

/**
 * Configuraci√≥n de la estrategia SAML para Google Workspace
 * Utiliza @node-saml/passport-saml para la autenticaci√≥n con Google
 */
export const samlStrategy = new Strategy(
  {
    // URL donde Google enviar√° la respuesta SAML
    callbackUrl: env.SAML_CALLBACK_URL,
    
    // URL de entrada del proveedor SAML (Google Workspace)
    entryPoint: env.SAML_ENTRY_POINT,
    
    // Identificador √∫nico de nuestra aplicaci√≥n
    issuer: env.SAML_ISSUER,
    
    // Certificado p√∫blico de Google para verificar las respuestas
    idpCert: env.SAML_CERT,
    
    // Formato del identificador de usuario (NameID)
    identifierFormat: 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress',
    
    // Configuraciones adicionales
    wantAssertionsSigned: false, // Temporalmente deshabilitado para debugging
    wantAuthnResponseSigned: false, // Temporalmente deshabilitado para debugging
    acceptedClockSkewMs: 30000, // 30 segundos de tolerancia para problemas de sincronizaci√≥n
    disableRequestedAuthnContext: true,
    signatureAlgorithm: 'sha256',
    digestAlgorithm: 'sha256',
  },
  /**
   * Funci√≥n de callback que se ejecuta despu√©s de la autenticaci√≥n exitosa
   * @param profile - Perfil del usuario obtenido de Google
   * @param done - Funci√≥n de callback de Passport
   */
  (profile: any, done: (err: any, user?: any, info?: any) => void) => {
    try {
      // üîç LOGS DETALLADOS PARA DIAGN√ìSTICO SAML
      console.log('=== INICIO PROCESAMIENTO PERFIL SAML ===');
      console.log('üìã Perfil completo recibido:', JSON.stringify(profile, null, 2));
      console.log('üìß Email extra√≠do:', profile['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress']);
      console.log('üÜî NameID:', profile.nameID);
      console.log('üè¢ Dominio:', profile['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn']);
      console.log('üë§ Nombre completo:', profile['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name']);
      console.log('‚è∞ Timestamp:', new Date().toISOString());
      console.log('=== FIN PROCESAMIENTO PERFIL SAML ===');
      
      // Por ahora, simplemente retornamos el perfil
      // En el siguiente paso, aqu√≠ procesaremos el perfil y crearemos/actualizaremos el usuario
      return done(null, profile);
    } catch (error: any) {
      console.error('‚ùå Error processing SAML profile:', error);
      console.error('‚ùå Stack trace:', error.stack);
      return done(error, null);
    }
  },
  // Tercer par√°metro opcional para configuraci√≥n adicional
  {} as any
);

/**
 * Configuraci√≥n de metadatos SAML para el Service Provider
 * Esta informaci√≥n ser√° necesaria para configurar Google Workspace
 */
export const samlMetadata = {
  // URL donde Google puede encontrar nuestros metadatos
  metadataUrl: `${env.HOST}:${env.PORT}/api/auth/saml/metadata`,
  
  // URL donde Google enviar√° las respuestas SAML
  callbackUrl: `${env.HOST}:${env.PORT}/api/auth/saml/callback`,
  
  // URL donde Google redirigir√° despu√©s del logout
  logoutUrl: `${env.HOST}:${env.PORT}/api/auth/logout`,
  
  // Identificador √∫nico de nuestro Service Provider
  entityId: env.SAML_ISSUER,
};

/**
 * Mapeo de atributos SAML de Google a nuestros campos de usuario
 * Google env√≠a ciertos atributos est√°ndar que mapearemos a nuestros campos
 */
export const samlAttributeMapping = {
  // Identificador √∫nico del usuario en Google
  googleId: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier',
  
  // Email del usuario
  email: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress',
  
  // Nombre completo
  fullName: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name',
  
  // Nombre
  firstName: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname',
  
  // Apellido
  lastName: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname',
  
  // Dominio de la empresa
  domain: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn',
};
